#!/bin/bash

# to generate a new config file, go here: https://airvpn.org/generator/
# select the servers you want, download those config files, and aggregate the remotes
# into a new file built off of the existing templates.
# All that is needed is to replace the "remote" directives with the new IP's.
case $1 in
    --help)
        echo "menu:"
        echo "  start-airvpn sweden|swe"
        echo "  start-airvpn canada|bc"
        echo "  start-airvpn asia|a"
        echo "  start-airvpn hongKong"
        echo "  start-airvpn east-coast|e"
        echo "  start-airvpn spain|es"
        echo "  start-airvpn default = west coast US"
        exit 0
        ;;
    sweden|swe)
        config=AirVPN_SE-Stockholm_Ain_UDP-443.ovpn
        ;;
    canada|bc)
        config=AirVPN_America_UDP-443.ovpn
        ;;
    asia|a)
        config=AirVPN_Asia_UDP-443.ovpn
        ;;
    hongKong|h)
        config=AirVPN_Hong-Kong_UDP-443.ovpn
        ;;
    east-coast|e)
        config=AirVPN_East-Coast_UDP-443.ovpn
        ;;
    spain|es)
        config=AirVPN_Spain_UDP-443.ovpn
        if [ "$2" == '--tcp' ] ; then
          config=AirVPN_Spain_TCP-443.ovpn
        fi
        ;;
    *)
        # config=AirVPN_SE-Stockholm_Ain_UDP-443.ovpn
        config=AirVPN_West-Coast_UDP-443.ovpn
        if [ "$2" == '--tcp' ] ; then
          config=AirVPN_West-Coast_TCP-443.ovpn
        fi
        ;;
esac

unameOut="$(uname -s)"
case "${unameOut}" in
  Linux*) machine=Linux;;
  Darwin*) machine=Mac;;
  *) machine="UNKNOWN:${unameOut}"
esac

if [[ $machine == Mac ]]; then
  networksetup -setv6off "Wi-Fi"

  # to re-enable: ipv6
  # networksetup -setv6automatic Wi-Fi
elif [[ $machine == Linux ]]; then
  echo "on linux!"
  # disable ipv6:
  disable-ipv6

fi

sudo killall -9 openvpn

# if [ "$1" == '--tcp' ] || [ "$2" == '--tcp' ] ; then
if [ "$1" == '--tcp' ]; then
  config=AirVPN_West-Coast_TCP-443.ovpn
fi
echo "loading openvpn config: $config"

logfile=/var/log/openvpn.log
# sudo openvpn --log $logfile --cd /home/lucas/openvpn --config $config --daemon

# when running a root, HOME is the /root dir!
openvpn_config_dir=~/openvpn
# openvpn_config_dir="$HOME/openvpn"
echo "loading open_config_dir: $openvpn_config_dir"

sudo openvpn --log $logfile --cd $openvpn_config_dir --config $config --daemon

# sudo openvpn --log $logfile --cd /home/lucas/openvpn --config $config --daemon

# suboptimal solution because it uses pkill,:
sudo tail -f $logfile | while read -r LOGLINE
do
   echo "$LOGLINE"
   if [[ $LOGLINE = *"Initialization Sequence Completed"* ]]; then
     echo "openvpn started successfully"
     # pkill -P $$ tail
     # unfortunately this doesn't break out
     break
   fi
done

# there is a .conf dns file that is in sync with our .openvpn config
# Or if we're no longer using systemd-reosolved, then comment out those scripts and use this intead:
set-dns air

# better option to pipe tail output, tee it to console, then break the pipe soon as
# match is complete. By backgrounding the tty and tail processes
# ( tail -f -n0 $logfile & ) | grep -q "Initialization Sequence Completed"
# ( tail -f -n0 $logfile & ) | grep -m1 -v "Initialization Sequence Completed"
# ( tail -f -n0 $logfile & ) | (  tee /dev/tty & ) | grep -m1 -v "Initialization Sequence Completed"

echo "vpn is set :-)"

