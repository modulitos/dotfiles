# readme:
# https://github.com/direnv/direnv/blob/master/man/direnv-stdlib.1.md

use_go() {
  # By default, this will add "$HOME/sdk/$1/bin" to PATH.
  # Is there a way to use "$HOME/go/bin/go1.17" instead?

  # golang versions get installed to the sdk dir:
  # https://golang.org/doc/manage-install
  # eg:
  # go install golang.org/dl/go1.19@latest
  # go1.19 download
  #
  # use go go1.19
  local go_dir=$HOME/sdk/$1
  load_prefix "$go_dir"
  layout go
}

use_istioctl() {
  # download istioctl here:
  # https://github.com/istio/istio/releases/tag/1.14.1
  # mkdir -p ~/sdk/istioctl/<version>/bin
  # tar -xvzf istioctl-<version>
  # mv istioctl ~/sdk/istioctl/<version>/bin
  #
  # eg:
  local istioctl_dir=$HOME/sdk/istioctl/$1
  # use istioctl 1.10.4
  load_prefix "$istioctl_dir"
}

use_prometheus() {
  local prom_dir=$HOME/sdk/prometheus/$1
  load_prefix "$prom_dir"
}

use_helm() {
  # Downloaded here:
  # https://github.com/helm/helm/releases/tag/v3.9.3
  # mkdir -p ~/sdk/helm/<version>/bin
  # tar -xvzf <helm>
  # mv <helm>/helm ~/sdk/helm/<version>/bin/
  local helm_dir=$HOME/sdk/helm/$1
  # use helm <version>
  load_prefix "$helm_dir"
}

use_kustomize() {
  # local kustomize_dir=$HOME/kustomize/$1
  # Download here:
  # https://github.com/kubernetes-sigs/kustomize/releases/tag/kustomize%2Fv4.2.0
  # mkdir -p ~/sdk/kustomize/<version>/bin
  # tar -xvzf kustomize-<version>
  # mv kustomize ~/sdk/kustomize/<version>/bin/
  local kustomize_dir=$HOME/sdk/kustomize/$1
  # use kustomize <version>
  load_prefix "$kustomize_dir"
}

use_terraform() {
  # Downloaded here:
  # https://releases.hashicorp.com/terraform/0.14.5
  # unzip terraform_*
  # mkdir -p ~/sdk/terraform/<version>/bin
  # mv helm ~/sdk/helm/<version>/bin/
  local helm_dir=$HOME/sdk/terraform/$1
  # use helm <version>
  load_prefix "$helm_dir"
}

use_node() {
  # https://gist.github.com/gudleik/7ae3ef00f42440671f16
  #
  # Either use node version specified in package.json:
  # use node package.json
  # Or a specific version:
  # use node 5.0.0
  #
  # Install a new node version with "n" package manager, eg:
  # n 10.16.0
  layout node

  local node_version=$1

  if [ "$node_version" == "package.json" ]; then
    # Requires jq: `brew install jq`
    node_version=$(jq --raw-output .engines.node package.json | tr -d "<=> ")
  fi

  local node_path=${NODE_DIR:-$HOME/sdk/n/versions/node}
  # This is what the path should look like:
  #
  # ‚ùØ ls -l ~/sdk/n/versions/node
  # total 0
  # drwxr-xr-x  9 lucas  staff  288 Feb 24 11:33 10.16.0
  # drwxr-xr-x  9 lucas  staff  288 Feb 24 10:50 12.13.1

  if [ -x "$node_path/$node_version/bin/node" ]; then
    PATH_add "$node_path/$node_version/bin"
  elif [ -x "$node_path/v$node_version/bin/node" ]; then
    # Support nvm users (nvm prefixes versions with 'v')
    PATH_add "$node_path/v$node_version/bin"
  else
    echo "!!! Node.js version $node_version is not installed"
  fi

  export NODE_PATH=./node_modules
}


# python: currently using pyenv:
# https://stackabuse.com/managing-python-environments-with-direnv-and-pyenv/
# ie: layout pyenv 3.9.7
